<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Outraverse</title>
  
  <subtitle>Outraverse Blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-20T22:42:58.868Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Outraverse</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>read command line output with python</title>
    <link href="http://example.com/2023/05/20/read-command-line-output-with-python/"/>
    <id>http://example.com/2023/05/20/read-command-line-output-with-python/</id>
    <published>2023-05-20T22:42:58.000Z</published>
    <updated>2023-05-20T22:42:58.868Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Nuxt v3, Introduction</title>
    <link href="http://example.com/2023/04/19/nuxt-v3-introduction/"/>
    <id>http://example.com/2023/04/19/nuxt-v3-introduction/</id>
    <published>2023-04-19T19:41:52.000Z</published>
    <updated>2023-04-22T15:43:27.920Z</updated>
    
    <content type="html"><![CDATA[<p>Nuxt is a framework for developing server-side redered (SSR) VueJS applications. It prioritizes providing an optimal developer experience by furnishing features such as automatic code splitting, file-based routing, server-side rendering, static site generation, and search engine optimization. </p><span id="more"></span><p>When working with Nuxt, the main difference from Vue development without a framework is that most of the required imports, such as routing components, do not need to be defined by the developer. Nevertheless, creating a Nuxt codebase for the first time may pose challenges to even experienced VueJS developers, as there is no “main.ts” or “main.js” file to import all the necessary libraries for the Vue object.</p><p>While the official documentation is online, the recent release of Nuxt v3 means that certain libraries and plugins may still be under development. As a newcomer to Nuxt during this era, I have discovered some useful insights that may be beneficial to other developers embarking on their first Nuxt v3 project.</p><hr><h2 id="File-Structure"><a href="#File-Structure" class="headerlink" title="File Structure"></a>File Structure</h2><p>Nuxt, being a framework built on top of VueJS, adheres to Vue’s file structure convention. Developers do not need to worry about updating Vue Router manually.</p><p>With vanila VueJS projects, the best practice is to place routing components into <code>/view</code> or <code>/pages</code> directories under the root of the code base. However, developer can really store these components anywhere as long as they define them correctly in the router file and or co-developers can tolerate the inormal file structure.</p><p>In Nuxt project, all routing components are stored inside <code>~/pages</code> directory. Nuxt uses a file-based routing system, which means what we placed inside the <code>~/pages</code> directory will reflect on the web URIs. <code>~/pages/about-us.vue</code> will be the address for <code>https://domain.com/about-us</code>. A nested component file such as <code>~/pages/admin/dashboard.vue</code> will be <code>https://domain.com/admin/dashboard</code>.</p><p>In addition, Nuxt provides a customizable layouts framework which is not available in vanilla VueJS. The layouts framework helps to define a consistent structure for the designed application. In Nuxt, developers can define commonly used components as reusable components, and then they have to manually define the layout in the app.vue file. </p><p>A default layout (<code>~/layouts/default.vue</code>) can be created with the following code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;AppHeader /&gt;</span><br><span class="line">    &lt;NuxtPage class=&quot;container&quot; /&gt;</span><br><span class="line">    &lt;AppFooter /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>This layout adds a header and a footer to every webpages. </p><p>Notibly, developers did not need to import header or footer components. Nuxt does it automatically.</p><hr><h2 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h2><p>Apart from the built-in font libraries that come with various CSS frameworks, Font Awesome is considered the most commonly used. </p><p>In the vanila VueJs environment, font Awesome, like many other JS&#x2F;TS or CSS libraries, are defined in <code>main.ts</code>&#x2F;<code>main.js</code> as shown below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* Add font awesome library */</span><br><span class="line">import &#123; library, dom &#125; from &quot;@fortawesome/fontawesome-svg-core&quot;;</span><br><span class="line">import &#123; FontAwesomeIcon &#125; from &quot;@fortawesome/vue-fontawesome&quot;;</span><br><span class="line">import &#123; faChevronDown, faCopyright, faBars &#125; from &quot;@fortawesome/free-solid-svg-icons&quot;;</span><br><span class="line">import &#123; faBtc, faTwitterSquare, faGithubSquare, faYoutubeSquare &#125; from &quot;@fortawesome/free-brands-svg-icons&quot;;</span><br><span class="line">library.add(faBtc, faChevronDown, faCopyright, faBars, faTwitterSquare, faGithubSquare, faYoutubeSquare);</span><br><span class="line">dom.watch();</span><br></pre></td></tr></table></figure><p>In Nuxt v3 where Font Awesome hasn’t been adapt into an official module yet, developers can create a custom plugins inside <code>~/plugins</code> directory. Just simply create a JavaScript or TypeScript file and call it <code>fontawesome.[js | ts]</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; library, config &#125; from &quot;@fortawesome/fontawesome-svg-core&quot;</span><br><span class="line">import &#123; FontAwesomeIcon &#125; from &quot;@fortawesome/vue-fontawesome&quot;</span><br><span class="line">import &#123; faTwitterSquare, faGithubSquare, faYoutubeSquare &#125; from &quot;@fortawesome/free-brands-svg-icons&quot;</span><br><span class="line">import &#123; faChevronDown, faCopyright, faBars &#125; from &quot;@fortawesome/free-solid-svg-icons&quot;</span><br><span class="line"></span><br><span class="line">library.add(faBtc, faChevronDown, faCopyright, faBars, faTwitterSquare, faGithubSquare, faYoutubeSquare)</span><br><span class="line"></span><br><span class="line">// This is important, we are going to let Nuxt worry about the CSS</span><br><span class="line">config.autoAddCss = false</span><br><span class="line"></span><br><span class="line">export default defineNuxtPlugin((nuxtApp) =&gt; &#123;</span><br><span class="line">  nuxtApp.vueApp.component(&quot;font-awesome-icon&quot;, FontAwesomeIcon, &#123;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Code sample above is a JavaScript version of the Fontawesome plugin. Even though Nuxt v3 requires TypeScript, a JS file can still be used.</p><p>if we look closely, we can notice that importing Font Awesome in Vue and Nuxt is basically the same. Nuxt is built on top of Vue, so what works in Vue will work in Nuxt as well.</p><p>Most of Nuxt’s settings can be found in the <code>~/nuxt.config.ts</code> file. To register Font Awesome’s CSS file, navigate to the CSS section or add the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">css: [</span><br><span class="line">    &quot;@fortawesome/fontawesome-svg-core/styles.css&quot;,</span><br><span class="line">    /*** other CSS libraries ***/</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>Using Font Awesome in Vue Components is the same as in VueJS project: <code>&lt;font-awesome-icon :icon=&quot;[&#39;fab&#39;, &#39;twitter-square&#39;]&quot; /&gt;</code>.</p><hr><h2 id="Internationalization"><a href="#Internationalization" class="headerlink" title="Internationalization"></a>Internationalization</h2><p>As a bilingual person, adding multi-language functionality is always an essnetial aspect of software development, particularly in web applications. Over the years, Multiple languages has become quite standardized by using i18n, regardless of the environment used.</p><p>To install i18n in Nuxt v3, run installation with yarn or npm, or add the following in <code>package.json</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;@nuxtjs/i18n&quot;: &quot;^8.0.0-beta.10&quot;</span><br></pre></td></tr></table></figure><p>Similar to Font Awesome, i18n configuration is added in <code>nuxt.config.ts</code>. Instead of storing all language data inside the nuxt.config.ts file, it’s cleaner and more organized to use multiple JSON or YAML files to store each language separately. These language files can be placed anywhere within the code repository. For the purpose of clarity, let’s assume that a directory called <code>~/locales</code> has been created under the root of the code repo.</p><p>At the top of the <code>nuxt.config.ts</code> file, add:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import en from &quot;./locales/en.json&quot;;</span><br><span class="line">import fr from &quot;./locales/fr.json&quot;;</span><br><span class="line">import zh from &quot;./locales/zh.json&quot;;</span><br></pre></td></tr></table></figure><p>Find or create the <strong>modules</strong> section in the <code>nuxt.config.ts</code> file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">modules: [</span><br><span class="line">  &quot;@nuxtjs/i18n&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>Since i18n has a community module in the Nuxt v3 ecosystem, there is no need to create a new plugin.</p><p>To configure i18n, add a new section inside the <code>nuxt.config.ts</code> file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">i18n: &#123;</span><br><span class="line">  locales: [</span><br><span class="line">    &#123; code: &quot;en&quot;, name: &quot;English&quot; &#125;,</span><br><span class="line">    &#123; code: &quot;en&quot;, name: &quot;langue français&quot; &#125;</span><br><span class="line">    &#123; code: &quot;zh&quot;, name: &quot;中文&quot; &#125;,</span><br><span class="line">  ],</span><br><span class="line">  defaultLocale: &quot;en&quot;,</span><br><span class="line">  vueI18n: &#123;</span><br><span class="line">    fallbackLocale: &quot;en&quot;,</span><br><span class="line">    messages: &#123;</span><br><span class="line">      en,</span><br><span class="line">      fr,</span><br><span class="line">      zh,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The objects <code>en</code>, <code>fr</code>, and <code>zh</code> are imported from the JSON files. The locales array allows developers to retrieve the list of all supported languages in the project from any component.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;navbar-dropdown is-right&quot;&gt;</span><br><span class="line">    &lt;a v-for=&quot;l in locales&quot; :key=&quot;l.code&quot; class=&quot;navbar-item&quot;&gt;</span><br><span class="line">      &#123;&#123; l.name &#125;&#125;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">      locales(): LocaleObject[] &#123;</span><br><span class="line">        return this.$i18n.locales</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Lastly, the default language of this project is English since defaultLocale is set to “en”.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Nuxt is a framework for developing server-side redered (SSR) VueJS applications. It prioritizes providing an optimal developer experience by furnishing features such as automatic code splitting, file-based routing, server-side rendering, static site generation, and search engine optimization. &lt;/p&gt;</summary>
    
    
    
    <category term="Nuxt" scheme="http://example.com/categories/Nuxt/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="Nuxt" scheme="http://example.com/tags/Nuxt/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>OpenHPC Generate Job Data Report</title>
    <link href="http://example.com/2022/10/15/OpenHPC-Generate-Job-Data-Report/"/>
    <id>http://example.com/2022/10/15/OpenHPC-Generate-Job-Data-Report/</id>
    <published>2022-10-15T20:41:43.000Z</published>
    <updated>2022-10-15T22:26:28.013Z</updated>
    
    <content type="html"><![CDATA[<p>We received a customer request to generate a resource usages from individual jobs inside our High Performance Cluster environment. We have Zabbix installed in the environment; however, we want to see if we could generate something from the system itself natively.</p><span id="more"></span><p>OpenHPC uses SLURM to manage worlloads. Therefore, we can dive into SLURM commands to approach this task. None of us have taken SchedMD training courses, our knowledge came from Slurm documentation[1], or plan Google searches. This is a good opportunity and use case to get ourselves more familiar with HPC ecosystems.</p><h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><p>We know “<strong>sacct</strong>“ is a Slurm command that displays accounting data for all jobs and job steps in the Slurm job accoutning log and&#x2F;or database[2]. Therefore, I started to going through its manual page.</p><p><strong>sacct</strong> has options to query a start and end dates, and it can also toggle between the current user and all users’ job history. This is good. So we test the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sacct -S 2022-10-01 -E 2022-10-14 -X -a -o JobID,Start,End,Elapsed,ReqMem,ReqCPUS,User,Node</span><br></pre></td></tr></table></figure><p>where:</p><ul><li><strong>-S</strong> is the start date of the query</li><li><strong>-E</strong> is the end date of the query</li><li><strong>-X</strong> is statistics relevant to each job allocation</li><li><strong>-a</strong> is all users</li><li>and <strong>-o</strong> stand for format. Note</li></ul><div class="alert warning"><p>all queried fields cannot have space after comma, it will treat whatever behind the first space seperated arguments.</p></div><p>The output showed us exactly what we needed. Cool. Now we can capture the data displayed on screen into a file by redirect the standand output with “<strong>&gt;</strong>“</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sacct -S 2022-10-01 -E 2022-10-14 -X -a -o JobID,Start,End,Elapsed,ReqMem,ReqCPUS,User,Node &gt; filename</span><br></pre></td></tr></table></figure><p>But, I want to save the data into a CSV format. This way I can just send my file as a report to the customer.</p><p>I did not see any options to convert tabs between each field to commas; however, there is an option, <em><strong>–parsable2</strong></em> to delimited data with “|”. That’s good enough, we can always manipulate string inside a Bash Script.</p><p>Now the command has became:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sacct -S 2022-10-01 -E 2022-10-14 -X -a -o JobID,Start,End,Elapsed,ReqMem,ReqCPUS,User,Node --parsable2 &gt; filename</span><br></pre></td></tr></table></figure><p><strong>sed</strong> command is a Linux&#x2F;Unix command, that can transform text by replacing a string with another string. Here, we want to replace “<strong>|</strong>“ with “<strong>,</strong>“. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;s/|/,/g&#x27; filename &gt; new_filename.csv</span><br></pre></td></tr></table></figure><p>This will do the trick.</p><h2 id="Implentation"><a href="#Implentation" class="headerlink" title="Implentation"></a>Implentation</h2><p>We can write these two line of bash command into a script:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">sacct -S 2022-10-01 -E 2022-10-14 -X -a -o JobID,Start,End,Elapsed,ReqMem,ReqCPUS,User,Node --parsable2 &gt; filename</span><br><span class="line">sed &#x27;s/|/,/g&#x27; filename &gt; new_filename.csv</span><br><span class="line"># remove filename</span><br><span class="line">rm filename</span><br></pre></td></tr></table></figure><p>Since <em><strong>filename</strong></em> is just a temporary file; we really do not need to save it when we really just need to CSV file. We can just delete it at the end. We can use <code>sed --in-place</code> to write new output into the same file; but we still will have a backup copy of the original to deal with. It makes no difference between in-place editing and create a temprary file, then delete it later.</p><p>Another argument of why we did our approach is we do not have much data; therefore, we just don’t care if we have to write two files to the disk.</p><h2 id="Afterthought"><a href="#Afterthought" class="headerlink" title="Afterthought"></a>Afterthought</h2><p>There are a couple of more things we can do to make this tiny script more useful:</p><ol><li>We can make the start and end date dynamic so that we can run the same script in the future.</li><li>With a dynamic start and end date, we make a cronjob to run this script monthly.</li><li>Email the output CSV file to a email group or SCP to a shared file server for review.</li></ol><p>Nonetheless, our customer hasn’t asked any automated reports yet; so, this is it for now.</p><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol><li><a href="https://slurm.schedmd.com/documentation.html">slurm.schedmd.com&#x2F;documentation.html</a></li><li><a href="https://slurm.schedmd.com/sacct.html">https://slurm.schedmd.com/sacct.html</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;We received a customer request to generate a resource usages from individual jobs inside our High Performance Cluster environment. We have Zabbix installed in the environment; however, we want to see if we could generate something from the system itself natively.&lt;/p&gt;</summary>
    
    
    
    <category term="OpenHPC" scheme="http://example.com/categories/OpenHPC/"/>
    
    
    <category term="OpenHPC" scheme="http://example.com/tags/OpenHPC/"/>
    
    <category term="Slurm" scheme="http://example.com/tags/Slurm/"/>
    
  </entry>
  
  <entry>
    <title>Firebase and Namecheap</title>
    <link href="http://example.com/2022/09/27/firebase-and-namecheap/"/>
    <id>http://example.com/2022/09/27/firebase-and-namecheap/</id>
    <published>2022-09-28T03:46:57.000Z</published>
    <updated>2022-09-28T04:56:06.908Z</updated>
    
    <content type="html"><![CDATA[<p>I have bought the domain name, outraverse.io, for a while. After playing around with Cyclic and other serverless platforms, I have decided to building a web application on Google Firebase.</p><p>Just FYI, building a single-page website can be free on Firebase; however, trying to embedded any backend functions on Firebase will require to upgrade to “<strong>Pay as you go</strong>“ plan.</p><span id="more"></span><p>After building my simple site, I need to register my firebase hosting site with my domain. I used to purchasing domains with GoDaddy, but this time, I got my domain with Namecheap. Namecheap, as the name suggested, it is fairly cheap. GUI is fairly easy to use. </p><p>Once log in Namecheap’s portal, just select the domain name, in which needed to be managed, and go to Advanced DNS section.</p><p><img src="/2022/09/27/firebase-and-namecheap/namecheap.png" alt="Advanced DNS Config"></p><p>There are several important records needed to added in order to have Firebase and Namecheap to connect correctly.</p><ol><li>Two <strong>A Record</strong>, which are the <em>apex domain</em> and <em>wwww subdomain</em>. Both need to have the IP address of the host address inside the Firebase.</li><li>A <strong>CNAME Record</strong>, that has www subdomain as Host, and the value of the exact subdomain name from the Firebase host.</li><li>Last two records are <strong>TXT Record</strong>.</li></ol><ul><li>One is the google site verfication string. The host is @, and the value is whatever Firebase gives you when you add the custom domain process. <strong>Make sure</strong> to copy the verification string as soon as it was popped up during the custom domain process. I haven’t found a way to re-display the secret yet.</li><li>The second <strong>TXT Record</strong> is challenge record that will only be used if the domain has already existed with a previous record. It is just to keep the domain up without any interruption.</li></ul><p>Firebase validate the domain name fairly quick. If it takes more than 1 hour, it probably means some records were wrong, and changes are needed.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I have bought the domain name, outraverse.io, for a while. After playing around with Cyclic and other serverless platforms, I have decided to building a web application on Google Firebase.&lt;/p&gt;
&lt;p&gt;Just FYI, building a single-page website can be free on Firebase; however, trying to embedded any backend functions on Firebase will require to upgrade to “&lt;strong&gt;Pay as you go&lt;/strong&gt;“ plan.&lt;/p&gt;</summary>
    
    
    
    <category term="General" scheme="http://example.com/categories/General/"/>
    
    
    <category term="namecheap" scheme="http://example.com/tags/namecheap/"/>
    
    <category term="firebase" scheme="http://example.com/tags/firebase/"/>
    
    <category term="hosting" scheme="http://example.com/tags/hosting/"/>
    
  </entry>
  
  <entry>
    <title>Play Around Sendinblue API</title>
    <link href="http://example.com/2022/09/15/play-around-sendinblue-api/"/>
    <id>http://example.com/2022/09/15/play-around-sendinblue-api/</id>
    <published>2022-09-16T03:47:46.000Z</published>
    <updated>2022-09-16T05:00:18.932Z</updated>
    
    <content type="html"><![CDATA[<p>In my past projects, I have always used PHP and a Linux Server to send emails captured by web GUIs. Today, I need find a way to implementation a email function inside Cyclic.sh serverless platform.</p><p>The server setup uses ExpressJs as the backend; therefore, of course, PHP is out of window. I tried to search a solution with pure front end JavaScript. Everything I have found required me to hardcode secrets&#x2F;passwords in the source code. <strong>But, who would want to do that?</strong></p><span id="more"></span><p>Then, I stumbled upon <strong><a href="https://www.sendinblue.com/">Sendinblue</a></strong>; A solution that can support SMTP, and allow me to send transactional emails via API. I am not advertising this product since I have only using the free plan. It allows me to send 300 emails per day. I am doing a small project, this is the cheap, perfect option for me right now.</p><h3 id="To-use-Sendinblue’s-Email-API-I-need-to-install-it-SDK"><a href="#To-use-Sendinblue’s-Email-API-I-need-to-install-it-SDK" class="headerlink" title="To use Sendinblue’s Email API, I need to install it SDK."></a>To use Sendinblue’s Email API, I need to install it SDK.</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add sib-api-v3-sdk</span><br></pre></td></tr></table></figure><p>There are other options for PHP, Python, etc. But I am doing ExpressJS today, so I download the SDK package for NodeJS.</p><h3 id="Create-a-new-API-key"><a href="#Create-a-new-API-key" class="headerlink" title="Create a new API key"></a>Create a new API key</h3><p>New API authentication keys can be created at <a href="https://account.sendinblue.com/advanced/api">https://account.sendinblue.com/advanced/api</a>. Just need to give a name for the purpose of monitoring individual project.</p><p><img src="https://images.ecency.com/DQmP6eJ89Y69SspihyLtTco8a42SGm9CLkmiMjmtjbBirdw/image.png"></p><div class="alert warning"><p>Keep in mind, they only show the key once during the creation. Make sure to copy that key down, otherwise that key is going to be wasted.</p></div><h3 id="Store-API-KEY-in-code"><a href="#Store-API-KEY-in-code" class="headerlink" title="Store API KEY in code"></a>Store API KEY in code</h3><p>For obvious reason, we do not want to write the key inside the code repo. Now we need to install dotenv to kepp all our environment variables.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add dotenv</span><br></pre></td></tr></table></figure><p><code>dotenv</code> allows us to utlized .env files. The .env file is located at the root of code repo. Don’t forget to include .env inside the .gitignore file. Otherwise, there’s not much point to use environment variables.</p><p>To use environment variables, we just need to:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>).<span class="title function_">config</span>();</span><br><span class="line"><span class="keyword">const</span> apiKey.<span class="property">apiKey</span> = process.<span class="property">env</span>.<span class="property">SIB_Api_key</span></span><br></pre></td></tr></table></figure><p>SIB_Api_key is the variable I defined for my API Key. The name can be anything we wanted, as long as we don’t use any keywords or possible functions names we use in this project.</p><p>Since we always have a default email address to either send or receive email notifications. We can add them in the .env file as well.</p><h3 id="Code-Sendinblue-Email-API"><a href="#Code-Sendinblue-Email-API" class="headerlink" title="Code Sendinblue Email API"></a>Code Sendinblue Email API</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>).<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SibApiV3Sdk</span> = <span class="built_in">require</span>(<span class="string">&quot;sib-api-v3-sdk&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> defaultClient = <span class="title class_">SibApiV3Sdk</span>.<span class="property">ApiClient</span>.<span class="property">instance</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> apiKey = defaultClient.<span class="property">authentications</span>[<span class="string">&quot;api-key&quot;</span>];</span><br><span class="line">apiKey.<span class="property">apiKey</span> = process.<span class="property">env</span>.<span class="property">SIB_Api_Key</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> apiInstance = <span class="keyword">new</span> <span class="title class_">SibApiV3Sdk</span>.<span class="title class_">TransactionalEmailsApi</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sendSmtpEmail = <span class="keyword">new</span> <span class="title class_">SibApiV3Sdk</span>.<span class="title class_">SendSmtpEmail</span>();</span><br></pre></td></tr></table></figure><p>Code above is pretty much self explantory. Initialize the SDK library, set up authentication method, define the API instance and the SMTP Email function, call, etc.. Just copy and paste them on top of the code, and call it done.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendMail</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  sendSmtpEmail.<span class="property">subject</span> = data.<span class="property">subject</span>;</span><br><span class="line">  sendSmtpEmail.<span class="property">htmlContent</span> = data.<span class="property">message</span>;</span><br><span class="line">  sendSmtpEmail.<span class="property">sender</span> = &#123;<span class="string">&quot;name&quot;</span>: data.<span class="property">name</span>, <span class="string">&quot;email&quot;</span>: data.<span class="property">email</span>&#125;;</span><br><span class="line">  sendSmtpEmail.<span class="property">to</span> = [&#123;<span class="string">&quot;email&quot;</span>: process.<span class="property">env</span>.<span class="property">SIB_Main_Email</span>, <span class="string">&quot;name&quot;</span>: process.<span class="property">env</span>.<span class="property">SIB_Main_Name</span>&#125;];</span><br><span class="line">  sendSmtpEmail.<span class="property">headers</span> = &#123;<span class="string">&quot;sender.ip&quot;</span>: data.<span class="property">senderip</span>&#125;;</span><br><span class="line"></span><br><span class="line">  apiInstance.<span class="title function_">sendTransacEmail</span>(sendSmtpEmail).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;API called successfully. Returned data: &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The next part is to fill all necessary email content. The full list of properties is located at <a href="">Reference: sendtransacemail</a><a href="https://developers.sendinblue.com/reference/sendtransacemail">https://developers.sendinblue.com/reference/sendtransacemail</a>). It contains a list of all body params and their definition.</p><p>As the code shows, The purpose of my code is to receive email. Therefore sendSmtpEmail.to is set to pre-defined variables.</p><p>I don’t know about anyone else, but I don’t like just display console.log in the backend. I need to return some value back to the front end. With that in mind, I modified <code>sendMail</code> to an asynchronous function, so that whenever I called this function, I am promised to receive a result.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sendMail</span>(<span class="params">data</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>Don’t forget to use <code>await</code> when calling this function.</p><p>And that’s the backbone of the email function.</p><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>It’s testing time! Postman, where are you?</p><p>I actually did not have Postman install on my current computer… Alright, I need to download it from <a href="https://www.postman.com/">https://www.postman.com/</a>.</p><p>Postman is a tool to test API calls. I can manually edit a JSON object and treat it as form data.</p><p><img src="https://images.ecency.com/DQmWcDSTy73LA3Dt7mBfEoLz7Bc5qBnNPKLjYJdt8b96iMH/image.png"></p><p>Within a couple seconds, I can the email.</p><p><img src="https://images.ecency.com/DQmQF9PtSYBBQFhH1HfSf6vJJUWdTEcL7wmDTSLW9p16Jrt/image.png"></p><p>Yeah, yeah, yeah… It’s from localhost, It may not be safe, give me a break!!</p><p>Now try one more time with the Web form…</p><h3 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h3><p>It’s fairly simple. At this point, I just need to push the git repository to Github, and let Cyclic doing its auto deployment.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;In my past projects, I have always used PHP and a Linux Server to send emails captured by web GUIs. Today, I need find a way to implementation a email function inside Cyclic.sh serverless platform.&lt;/p&gt;
&lt;p&gt;The server setup uses ExpressJs as the backend; therefore, of course, PHP is out of window. I tried to search a solution with pure front end JavaScript. Everything I have found required me to hardcode secrets&amp;#x2F;passwords in the source code. &lt;strong&gt;But, who would want to do that?&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="ExpressJS" scheme="http://example.com/tags/ExpressJS/"/>
    
    <category term="Mail" scheme="http://example.com/tags/Mail/"/>
    
    <category term="Sendinblue" scheme="http://example.com/tags/Sendinblue/"/>
    
  </entry>
  
  <entry>
    <title>First Blog in Outraverse</title>
    <link href="http://example.com/2022/09/02/first-blog-in-Outraverse/"/>
    <id>http://example.com/2022/09/02/first-blog-in-Outraverse/</id>
    <published>2022-09-03T03:34:21.000Z</published>
    <updated>2022-09-03T04:34:38.978Z</updated>
    
    <content type="html"><![CDATA[<p>Hello! This is my very first post in the Outraverse blog site.</p><p>I am a person, who has been in the IT field for too long. May recent years of day job got me into programming side of the IT career; and I have been assisting several groups with their web development projects. </p><span id="more"></span><p>However, the service has been migrated into a bigger organization and I don’t want to abandon all the customers, now my friends. This is the time I decided to make my own small entity, Outraverse, to continue my work with these projects. Not to mention my passion with Web 3.0 and blockchain technology, I really need to create my own workplace for all that fun stuff.</p><p>How knew, once a hobby of my, now turned into a side business. And this blog will be my journey of the Outraverse.</p><p>I don’t want to use WordPress or Drupal; they feel cheap out. During my research on building this blog site, I stump upon Hexo. It works with NodeJS.</p><p>I don’t want to start a war between PHP and JavaScript here. Each programming language has its own strength and weakness. It just “<em><strong>Cool</strong></em>“, but mostly free, to run a site on Github. You know what, it still does sound like I am choosing JS over PHP, let’s forget about both and use Perl…</p><p>Anyway, since this is my first post, let me start with building this blog site with Hexo…</p><p>I read an article about the difference between Jekyll, Hugo and Hexo:</p><blockquote><p><a href="https://www.techiediaries.com/jekyll-hugo-hexo/">https://www.techiediaries.com/jekyll-hugo-hexo/</a></p></blockquote><br />Found that Hexo has speed, Markdown support, etc. The only con the article mentioned was <blockquote><p>Hexo has a relatively large community but the majority is non-English speakers (from China)</p></blockquote><br />As a Chinese Mandarin speaker, I asked myself, what was the con? Guess, not everyone is a bilingual. But it does not bother me. I like the "**blazing fast**" part. As a person, who manages data center, VMware, HPC clusters, performance fits more of my appetite. Therefore, npm this 10 years old system.<p>Installation is fairly simple. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install hexo CLI</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># start a hexo project</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="comment"># start local server</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>I has already create a site with default theme. Knowing myself, I am going to build a theme from scratch; but for now, I will just clone one. This is the first day, cut me some slack, okay?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clone theme repo</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak.git</span><br></pre></td></tr></table></figure><p>After getting the theme in the project repo, it is time to customize. </p><p>Ah, yml files. Meet my old friend from ansible configurations. Updating a couple variables, I believe I have my work on the first day done.</p><p>Oh, one more!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure><p>Got to have a way to compile and push to Github, right?</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Hello! This is my very first post in the Outraverse blog site.&lt;/p&gt;
&lt;p&gt;I am a person, who has been in the IT field for too long. May recent years of day job got me into programming side of the IT career; and I have been assisting several groups with their web development projects. &lt;/p&gt;</summary>
    
    
    
    <category term="General" scheme="http://example.com/categories/General/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Github" scheme="http://example.com/tags/Github/"/>
    
  </entry>
  
</feed>
